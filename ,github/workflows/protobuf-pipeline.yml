on:
  push:
    paths:
      - '.github/workflows/protobuf-pipeline.yml'
      - 'proto/kinnekode/protobuf/**'
      - 'dotnet/protobuf/**'
      - 'golang/kinnekode/protobuf/**'
      - '!**/**.md'
      - '!doc/**'
env:
  MAJOR_MINOR_PATCH: 0.2.2
  DOTNET_SOLUTION: dotnet/protobuf/KinNekoDe.ApiContract.Protobuf.sln
  GOLANG_MODULE: golang/kinnekode/protobuf

concurrency: ci-${{ github.ref }}

name: apicontract-protobuf

jobs:
  publish:
    name: "Publish api"
    runs-on: ubuntu-latest
    permissions:
        contents: write
        packages: write
    steps:
      - uses: actions/checkout@v3
      - name: Version suffix
        id: version_suffix
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            echo 'for pull request pipeline'
            USE=true
            SUFFIX=${GITHUB_HEAD_REF##*/}.${{github.run_number}}
            EXTENSION="-${SUFFIX}"
          else
            if [[ ${{ github.ref }} == "refs/heads/${{ github.event.repository.default_branch }}" ]]; then
              echo 'for default branch pipeline'
              USE=false
              SUFFIX=''
              EXTENSION=''
          else
              echo 'for feature branch pipeline'
              USE=true
              SUFFIX=${GITHUB_REF##*/}.${{github.run_number}}
              EXTENSION="-${SUFFIX}"
            fi
          fi
          echo 'use_version_suffix' $USE
          echo 'version_suffix: ' $SUFFIX
          echo "use_version_suffix=$USE" >> $GITHUB_OUTPUT
          echo "version_suffix=$SUFFIX" >> $GITHUB_OUTPUT
          echo "extension=$EXTENSION" >> $GITHUB_OUTPUT
      - name : Semantic version
        id: semantic_version
        run: |
          SEMANTIC_VERSION="${{ env.MAJOR_MINOR_PATCH }}"
          SEMANTIC_VERSION="${SEMANTIC_VERSION}${{ steps.version_suffix.outputs.extension }}"
          echo 'MAJOR_MINOR_PATCH: ' $MAJOR_MINOR_PATCH
          echo 'SEMANTIC_VERSION: ' $SEMANTIC_VERSION
          echo "semantic_version=$SEMANTIC_VERSION" >> $GITHUB_OUTPUT
          echo "major_minor_patch=$MAJOR_MINOR_PATCH" >> $GITHUB_OUTPUT
      # golang
      - name: Install go
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19.0'
      - name: "Installed go version"
        run: go version
      - name: "Build go api"
        run: |
          cd ${{ env.GOLANG_MODULE}}
          go build ./...
      # dotnet
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 7.x
      - name: Set dotnet parameter
        id: dotnet
        run: |
          ARGS=()
          ARGS+=("-p:VersionPrefix=${{ steps.semantic_version.outputs.semantic_version }}")
          if [[ "${{ steps.version_suffix.outputs.use_version_suffix }}" == 'true' ]]; then
            ARGS+=('--version-suffix' "${{ steps.version_suffix.outputs.version_suffix }}")
          fi
          echo 'parameters' ${ARGS[@]}
          echo "parameters=${ARGS[@]}" >> $GITHUB_OUTPUT
      - name: Remove Github nuget source that was added with nuget.config
        run: dotnet nuget remove source github --configfile dotnet/nuget.config
      - name: Add Github nuget source
        run: dotnet nuget add source https://nuget.pkg.github.com/KinNeko-De/index.json --name github --username KinNeko-De --password ${{secrets.GITHUB_TOKEN}} --store-password-in-clear-text --configfile dotnet/nuget.config
      - name: Restore dependencies for .NET
        run: dotnet restore ${{ env.DOTNET_SOLUTION }} --configfile dotnet/nuget.config
      - name: Build .NET
        run: |
         dotnet build ${{ env.DOTNET_SOLUTION }} --no-restore -c Release ${{ steps.dotnet.outputs.parameters }}
      - name: Pack .NET
        run: |
          dotnet pack ${{ env.DOTNET_SOLUTION }} --no-restore --no-build -c Release ${{ steps.dotnet.outputs.parameters }}
      # publish api
      - name: Publish nuget for .NET
        run: dotnet nuget push **\**.nupkg --source "https://nuget.pkg.github.com/KinNeko-De" --api-key ${{ secrets.GITHUB_TOKEN }}
      - name: Create semantic versioning git tag for golang
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ env.GOLANG_MODULE }}/v${{ steps.semantic_version.outputs.semantic_version }}",
              sha: context.sha
            })
