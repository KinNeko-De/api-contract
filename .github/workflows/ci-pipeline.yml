on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
      dotnet_solution:
        required: true
        type: string
      golang_module:
        required: true
        type: string
      major_minor_patch:
        required: true
        type: string
    secrets:
      CODECOV_TOKEN:
        required: true

jobs:
  ci:
    name: "${{ inputs.project }}"
    runs-on: ubuntu-latest
    permissions:
        contents: write
        packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Version suffix
        id: version_suffix
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            echo 'for pull request pipeline'
            USE=true
            SUFFIX=${GITHUB_HEAD_REF##*/}.${{github.run_number}}
            EXTENSION="-${SUFFIX}"
          else
            if [[ ${{ github.ref }} == "refs/heads/${{ github.event.repository.default_branch }}" ]]; then
              echo 'for default branch pipeline'
              USE=false
              SUFFIX=''
              EXTENSION=''
          else
              echo 'for feature branch pipeline'
              USE=true
              SUFFIX=${GITHUB_REF##*/}.${{github.run_number}}
              EXTENSION="-${SUFFIX}"
            fi
          fi
          echo 'use_version_suffix' $USE
          echo 'version_suffix: ' $SUFFIX
          echo "use_version_suffix=$USE" >> $GITHUB_OUTPUT
          echo "version_suffix=$SUFFIX" >> $GITHUB_OUTPUT
          echo "extension=$EXTENSION" >> $GITHUB_OUTPUT
      - name : Semantic version
        id: semantic_version
        run: |
          MAJOR_MINOR_PATCH="${{ inputs.major_minor_patch }}"
          echo 'MAJOR_MINOR_PATCH: ' ${MAJOR_MINOR_PATCH}
          SEMANTIC_VERSION="${MAJOR_MINOR_PATCH}${{ steps.version_suffix.outputs.extension }}"
          echo 'SEMANTIC_VERSION: ' ${SEMANTIC_VERSION}
          echo "semantic_version=${SEMANTIC_VERSION}" >> $GITHUB_OUTPUT
          echo "major_minor_patch=${MAJOR_MINOR_PATCH}" >> $GITHUB_OUTPUT
      - name: "Version upgraded?"
        id: version_check
        run: |
          git fetch --prune --unshallow --tags > /dev/null 2>&1
          last_main_version=$(git tag --list '${{ inputs.golang_module }}/v[0-9]*\.[0-9]*\.[0-9]*' | grep -Pv "${{ inputs.golang_module }}/v[0-9]*\.[0-9]*\.[0-9]*-" | sort -V | tail -n 1)
          echo "Compare last main version: $last_main_version with current version: ${{ inputs.golang_module }}/v${{ steps.semantic_version.outputs.major_minor_patch }}"
          if [[ $(echo -e "${{ inputs.golang_module }}/v${{ steps.semantic_version.outputs.major_minor_patch }}\n$last_main_version" | sort -V | head -n 1) == "${{ inputs.golang_module }}/v${{ steps.semantic_version.outputs.major_minor_patch }}" ]]; then
            echo "Please upgrade the version number for ${{ inputs.golang_module }} to a higher value than $last_main_version"
            exit 1
          fi
      # golang
      - name: Install go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.22.0'
      - name: "Installed go version"
        run: go version
      - name: "Build go api"
        run: |
          cd ${{ inputs.golang_module}}
          go build ./...
      - name: "Test go api"
        run: |
          cd ${{ inputs.golang_module}}
          go test ./... -race -coverprofile=coverage.generated.tmp
      - name: "Exclude generated code"
        run: |
          cd ${{ inputs.golang_module}}
          grep -v ".pb.go" coverage.generated.tmp > coverage.out
          rm coverage.generated.tmp
      # dotnet
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 7.x
      - name: Set dotnet parameter
        id: dotnet
        run: |
          ARGS=()
          ARGS+=("-p:VersionPrefix=${{ steps.semantic_version.outputs.semantic_version }}")
          if [[ "${{ steps.version_suffix.outputs.use_version_suffix }}" == 'true' ]]; then
            ARGS+=('--version-suffix' "${{ steps.version_suffix.outputs.version_suffix }}")
          fi
          echo 'parameters' ${ARGS[@]}
          echo "parameters=${ARGS[@]}" >> $GITHUB_OUTPUT
      - name: Remove Github nuget source that was added with nuget.config
        run: dotnet nuget remove source github --configfile dotnet/nuget.config
      - name: Add Github nuget source
        run: dotnet nuget add source https://nuget.pkg.github.com/KinNeko-De/index.json --name github --username KinNeko-De --password ${{secrets.GITHUB_TOKEN}} --store-password-in-clear-text --configfile dotnet/nuget.config
      - name: Restore dependencies for .NET
        run: dotnet restore ${{ inputs.dotnet_solution }} --configfile dotnet/nuget.config
      - name: Build .NET
        run: |
         dotnet build ${{ inputs.dotnet_solution }} --no-restore -c Release ${{ steps.dotnet.outputs.parameters }}
      - name: Test .NET
        run: |
         dotnet test ${{ inputs.dotnet_solution }} --no-restore --no-build -c Release -p:Version=${{ inputs.major_minor_patch }} --collect:"XPlat Code Coverage" --settings dotnet/coverlet.runsettings --results-directory=dotnet/coverage
      - name: Publish code coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
      - name: Pack .NET
        run: |
          dotnet pack ${{ inputs.dotnet_solution }} --no-restore --no-build -c Release ${{ steps.dotnet.outputs.parameters }}
      # publish api
      - name: Publish nuget for .NET
        run: dotnet nuget push **\**.nupkg --source "https://nuget.pkg.github.com/KinNeko-De" --api-key ${{ secrets.GITHUB_TOKEN }}
      - name: Create semantic versioning git tag for golang
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ inputs.golang_module }}/v${{ steps.semantic_version.outputs.semantic_version }}",
              sha: context.sha
            })
