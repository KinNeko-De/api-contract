// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: kinnekode/restaurant/file/v1/file_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileService_StoreFile_FullMethodName        = "/kinnekode.restaurant.file.v1.FileService/StoreFile"
	FileService_StoreRevision_FullMethodName    = "/kinnekode.restaurant.file.v1.FileService/StoreRevision"
	FileService_DownloadFile_FullMethodName     = "/kinnekode.restaurant.file.v1.FileService/DownloadFile"
	FileService_DownloadRevision_FullMethodName = "/kinnekode.restaurant.file.v1.FileService/DownloadRevision"
)

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	// Stores a new file
	StoreFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StoreFileRequest, StoreFileResponse], error)
	// Stores a new revision to an existing file
	StoreRevision(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StoreRevisionRequest, StoreFileResponse], error)
	// Download the latest revision of the file
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error)
	// Download a specific revision of the file
	DownloadRevision(ctx context.Context, in *DownloadRevisionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) StoreFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StoreFileRequest, StoreFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[0], FileService_StoreFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StoreFileRequest, StoreFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_StoreFileClient = grpc.ClientStreamingClient[StoreFileRequest, StoreFileResponse]

func (c *fileServiceClient) StoreRevision(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StoreRevisionRequest, StoreFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[1], FileService_StoreRevision_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StoreRevisionRequest, StoreFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_StoreRevisionClient = grpc.ClientStreamingClient[StoreRevisionRequest, StoreFileResponse]

func (c *fileServiceClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[2], FileService_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadFileRequest, DownloadFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_DownloadFileClient = grpc.ServerStreamingClient[DownloadFileResponse]

func (c *fileServiceClient) DownloadRevision(ctx context.Context, in *DownloadRevisionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[3], FileService_DownloadRevision_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadRevisionRequest, DownloadFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_DownloadRevisionClient = grpc.ServerStreamingClient[DownloadFileResponse]

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility.
type FileServiceServer interface {
	// Stores a new file
	StoreFile(grpc.ClientStreamingServer[StoreFileRequest, StoreFileResponse]) error
	// Stores a new revision to an existing file
	StoreRevision(grpc.ClientStreamingServer[StoreRevisionRequest, StoreFileResponse]) error
	// Download the latest revision of the file
	DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error
	// Download a specific revision of the file
	DownloadRevision(*DownloadRevisionRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileServiceServer struct{}

func (UnimplementedFileServiceServer) StoreFile(grpc.ClientStreamingServer[StoreFileRequest, StoreFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StoreFile not implemented")
}
func (UnimplementedFileServiceServer) StoreRevision(grpc.ClientStreamingServer[StoreRevisionRequest, StoreFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StoreRevision not implemented")
}
func (UnimplementedFileServiceServer) DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileServiceServer) DownloadRevision(*DownloadRevisionRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadRevision not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}
func (UnimplementedFileServiceServer) testEmbeddedByValue()                     {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_StoreFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).StoreFile(&grpc.GenericServerStream[StoreFileRequest, StoreFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_StoreFileServer = grpc.ClientStreamingServer[StoreFileRequest, StoreFileResponse]

func _FileService_StoreRevision_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).StoreRevision(&grpc.GenericServerStream[StoreRevisionRequest, StoreFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_StoreRevisionServer = grpc.ClientStreamingServer[StoreRevisionRequest, StoreFileResponse]

func _FileService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).DownloadFile(m, &grpc.GenericServerStream[DownloadFileRequest, DownloadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_DownloadFileServer = grpc.ServerStreamingServer[DownloadFileResponse]

func _FileService_DownloadRevision_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRevisionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).DownloadRevision(m, &grpc.GenericServerStream[DownloadRevisionRequest, DownloadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_DownloadRevisionServer = grpc.ServerStreamingServer[DownloadFileResponse]

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kinnekode.restaurant.file.v1.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreFile",
			Handler:       _FileService_StoreFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StoreRevision",
			Handler:       _FileService_StoreRevision_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _FileService_DownloadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadRevision",
			Handler:       _FileService_DownloadRevision_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kinnekode/restaurant/file/v1/file_service.proto",
}
